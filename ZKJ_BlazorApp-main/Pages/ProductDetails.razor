@page "/product/{productId:int}"
@inject IProductsService ProductsService
@inject NavigationManager NavigationManager

<h3>@product?.ProductName</h3>

@if (product == null)
{
    <p>Loading product details...</p>
}
else
{
    <div class="product-details">
        @if (product.ImageData != null && product.ImageData.Length > 0)
        {
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(product.ImageData)" alt="@product.ProductName" class="product-image" />
        }
        else
        {
            <img src="/images/no-photo.png" alt="No Image Available" class="product-image" />
        }

        <h4>Product Name: @product.ProductName</h4>
        <p>Price (Netto): @product.UnitPriceNetto?.ToString("C")</p>
        <p>Price (Brutto): @product.UnitPriceBrutto?.ToString("C")</p>
        <p>Discount: @product.Discount?.ToString("P")</p>
        <p>Last Modified: @product.LastModified?.ToString("g")</p>
        <p>Category: @product.Category?.Name</p>

        <button @onclick="GoBack">Back to Products</button>
    </div>
}

@code {
    [Parameter]
    public int productId { get; set; }

    private Product product;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // Fetch the product details by ID
            product = await ProductsService.GetById(productId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching product details: {ex.Message}");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/shop");  // Modify the navigation path as needed
    }
}
