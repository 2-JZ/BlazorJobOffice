@page "/Products/addProduct"
@using System.IO
@attribute [Authorize]
@inject IProductsService ProductsService
@inject ICategoriesService CategoriesService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<h1 class="text-center">Add Product</h1>

<div class="row justify-content-center">
    <div class="col-md-6">
        <form>
            <div class="form-group mb-3">
                <label for="ProductName" class="form-label">Product Name</label>
                <input id="ProductName" class="form-control" @bind-value="@product.ProductName" placeholder="Enter product name" />
            </div>

            <div class="form-group mb-3">
                <label for="UnitPriceBrutto" class="form-label">Unit Price (Brutto)</label>
                <input id="UnitPriceBrutto" class="form-control" type="number" @bind-value="@product.UnitPriceBrutto" placeholder="Enter product price" />
            </div>

            <div class="form-group mb-3">
                <label for="CategoryId" class="form-label">Category</label>
                <select id="CategoryId" class="form-select" @bind="product.CategoryId">
                    <option value="">Select a category</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
            </div>

            <div class="form-group mb-3">
                <label for="ProductImage" class="form-label">Product Image</label>
                <InputFile id="ProductImage" OnChange="LoadImage" class="form-control" />
            </div>

            <div class="form-group mb-4">
                <button type="button" class="btn btn-primary me-2" @onclick="CreateProduct">Save</button>
                <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
            </div>
        </form>

        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private ProductRequest product = new ProductRequest();
    private IEnumerable<Category> categories;
    private string errorMessage;
    private byte[] imageBytes;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await CategoriesService.GetAll();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private async Task CreateProduct()
    {
        try
        {
            product.ImageData = imageBytes; // Store the image bytes in the product
            if (categories != null && product.CategoryId != 0)
            {
                if (categories.Any(category => category.Id == product.CategoryId))
                {
                    await ProductsService.Create(product);
                    navigationManager.NavigateTo("/Products");
                }
                else
                {
                    errorMessage = "Selected category does not exist.";
                }
            }
            else
            {
                errorMessage = "Please select a valid category.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/Products");
    }

    private async void LoadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15).CopyToAsync(memoryStream);
                imageBytes = memoryStream.ToArray();
            }
        }
    }
}
